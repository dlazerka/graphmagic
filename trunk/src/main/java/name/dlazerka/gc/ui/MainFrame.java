package name.dlazerka.gc.ui;

import name.dlazerka.gc.Main;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.swing.*;
import java.awt.event.*;
import java.awt.*;
import java.util.ResourceBundle;

public class MainFrame extends JFrame {
	private final static Logger logger = LoggerFactory.getLogger(MainFrame.class);

	private JPanel contentPane;
	private GraphPanel graphPanel;
	private JTabbedPane tabbedPane1;
	private JTable table1;
	private JButton addPluginButton;

	public MainFrame() {
		$$$setupUI$$$();
		setContentPane(contentPane);
		setTitle(Main.getString("main.title"));

// call onClose() when cross is clicked
		addWindowListener(
			new WindowAdapter() {
				public void windowClosing(WindowEvent e) {
					onClose();
				}
			}
		);

// call onClose() on ESCAPE
		contentPane.registerKeyboardAction(
			new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					onClose();
				}
			}, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
		);

		registerCommands();
	}

	private void registerCommands() {
	}

	private void onClose() {
		dispose();
	}

	private void createUIComponents() {
		graphPanel = new GraphPanel();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		createUIComponents();
		contentPane = new JPanel();
		contentPane.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
		contentPane.setBackground(new Color(-986896));
		contentPane.setEnabled(true);
		contentPane.setInheritsPopupMenu(false);
		contentPane.setRequestFocusEnabled(true);
		contentPane.setToolTipText("");
		final JSplitPane splitPane1 = new JSplitPane();
		splitPane1.setDividerLocation(200);
		splitPane1.setOrientation(1);
		splitPane1.setResizeWeight(1.0);
		contentPane.add(
			splitPane1, new com.intellij.uiDesigner.core.GridConstraints(
				1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER,
				com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH,
				com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW,
				com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW,
				null, null, null, 0, false
			)
		);
		final JPanel panel1 = new JPanel();
		panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
		splitPane1.setRightComponent(panel1);
		graphPanel.setBackground(new Color(-1));
		panel1.add(
			graphPanel, new com.intellij.uiDesigner.core.GridConstraints(
				0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER,
				com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH,
				com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW,
				com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW,
				null, new Dimension(800, 600), null, 0, false
			)
		);
		tabbedPane1 = new JTabbedPane();
		splitPane1.setLeftComponent(tabbedPane1);
		final JPanel panel2 = new JPanel();
		panel2.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
		tabbedPane1.addTab(ResourceBundle.getBundle("messages").getString("controls"), panel2);
		final JPanel panel3 = new JPanel();
		panel3.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
		tabbedPane1.addTab(ResourceBundle.getBundle("messages").getString("plugins"), panel3);
		table1 = new JTable();
		panel3.add(
			table1, new com.intellij.uiDesigner.core.GridConstraints(
				1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER,
				com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH,
				com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW,
				com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null,
				0, false
			)
		);
		addPluginButton = new JButton();
		this.$$$loadButtonText$$$(addPluginButton, ResourceBundle.getBundle("messages").getString("add.plugin"));
		panel3.add(
			addPluginButton, new com.intellij.uiDesigner.core.GridConstraints(
				0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER,
				com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL,
				com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW,
				com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false
			)
		);
		final JToolBar toolBar1 = new JToolBar();
		contentPane.add(
			toolBar1, new com.intellij.uiDesigner.core.GridConstraints(
				0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER,
				com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL,
				com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW,
				com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(-1, 20), null, 0,
				false
			)
		);
	}

	/**
	 * @noinspection ALL
	 */
	private void $$$loadButtonText$$$(AbstractButton component, String text) {
		StringBuffer result = new StringBuffer();
		boolean haveMnemonic = false;
		char mnemonic = '\0';
		int mnemonicIndex = -1;
		for (int i = 0; i < text.length(); i++) {
			if (text.charAt(i) == '&') {
				i++;
				if (i == text.length()) break;
				if (!haveMnemonic && text.charAt(i) != '&') {
					haveMnemonic = true;
					mnemonic = text.charAt(i);
					mnemonicIndex = result.length();
				}
			}
			result.append(text.charAt(i));
		}
		component.setText(result.toString());
		if (haveMnemonic) {
			component.setMnemonic(mnemonic);
			component.setDisplayedMnemonicIndex(mnemonicIndex);
		}
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return contentPane;
	}
}
